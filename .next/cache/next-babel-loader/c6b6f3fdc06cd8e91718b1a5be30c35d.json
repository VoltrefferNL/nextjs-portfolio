{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nvar postsDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    // Remove \".md\" from file name to get id\n    var id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  var fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map(function (fileName) {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getPostData(_x) {\n  return _getPostData.apply(this, arguments);\n}\n\nfunction _getPostData() {\n  _getPostData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n    var fullPath, fileContents, matterResult, processedContent, contentHtml;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fullPath = path.join(postsDirectory, \"\".concat(id, \".md\"));\n            fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n            matterResult = matter(fileContents);\n            _context.next = 5;\n            return remark().use(html).process(matterResult.content);\n\n          case 5:\n            processedContent = _context.sent;\n            contentHtml = processedContent.toString(); // Combine the data with the id\n\n            return _context.abrupt(\"return\", _objectSpread({\n              id: id,\n              contentHtml: contentHtml\n            }, matterResult.data));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPostData.apply(this, arguments);\n}\n\nexport function transforAllTags(arr) {\n  console.log(arr);\n  return arr;\n}","map":{"version":3,"sources":["/home/niels/Desktop/new-port/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","use","content","processedContent","contentHtml","toString","transforAllTags","arr","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,IAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,MAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,MAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC7C;AACA,QAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,QAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,QAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN6C,CAQ7C;;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CAT6C,CAW7C;;AACA;AACEH,MAAAA,EAAE,EAAFA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHmC,CAoBnC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,SAASC,aAAT,GAAyB;AAC5B,MAAMhB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,SAAOK,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC/B,WAAO;AACLa,MAAAA,MAAM,EAAE;AACNZ,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,gBAAsBY,WAAtB;AAAA;AAAA;;;0EAAO,iBAA2Bb,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCE,YAAAA,QADD,GACYhB,IAAI,CAACK,IAAL,CAAUD,cAAV,YAA6BU,EAA7B,SADZ;AAECG,YAAAA,YAFD,GAEgBlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAFhB,EAIL;;AACMG,YAAAA,YALD,GAKgBlB,MAAM,CAACgB,YAAD,CALtB;AAAA;AAAA,mBAOsBf,MAAM,GAAG0B,GAAT,CAAazB,IAAb,EAAmBG,OAAnB,CAA2Ba,YAAY,CAACU,OAAxC,CAPtB;;AAAA;AAOHC,YAAAA,gBAPG;AAQHC,YAAAA,WARG,GAQWD,gBAAgB,CAACE,QAAjB,EARX,EAUL;;AAVK;AAYHlB,cAAAA,EAAE,EAAFA,EAZG;AAaHiB,cAAAA,WAAW,EAAXA;AAbG,eAcAZ,YAAY,CAACC,IAdb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmBP,OAAO,SAASa,eAAT,CAAyBC,GAAzB,EAA6B;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,SAAOA,GAAP;AACA","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory)\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '')\n\n    // Read markdown file as string\n    const fullPath = path.join(postsDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n\n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data\n    }\n  })\n  // Sort posts by date\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n}\n\nexport function getAllPostIds() {\n    const fileNames = fs.readdirSync(postsDirectory)\n    return fileNames.map(fileName => {\n      return {\n        params: {\n          id: fileName.replace(/\\.md$/, '')\n        }\n      }\n    })\n  }\n\n  export async function getPostData(id) {\n    const fullPath = path.join(postsDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n  \n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n  \nconst processedContent = await remark().use(html).process(matterResult.content)\nconst contentHtml = processedContent.toString()\n\n    // Combine the data with the id\n    return {\n      id,\n      contentHtml,\n      ...matterResult.data\n    }\n  }\n\n\n  export function transforAllTags(arr){\n   console.log(arr) \n   return arr\n  }"]},"metadata":{},"sourceType":"module"}